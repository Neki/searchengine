#!/usr/bin/env python3

import argparse
import sys

from searchengine.parser import load_from_cacm_file
from searchengine.search import vectorial_search, boolean_search, binary_independance_retrieval
from searchengine.index.process import Weighting, Index
from searchengine.evaluation.evaluation import plot_precision_vs_recall, Request, plot_avg_precision
from searchengine.parser.query import load_from_query_file
from searchengine.parser.result import load_from_results_file
from searchengine.index.process import Weighting

class UnknownMethodError(Exception):

    def __init__(self, message, method_name):
        super().__init__(message)
        self.method_name = method_name


def main():
    parser = argparse.ArgumentParser(description="A simple text search tool.")
    subparsers = parser.add_subparsers(help='sub-command help')
    parser.add_argument("-n", "--answer-count", help="how many answers are returned", type=int, default=10)
    parser.add_argument("-c", "--collection", help="path to the file containing the collection", default="resources/cacm.all")
    parser.add_argument("-t", "--collection-type", help="select the parser used to "
            "load the collection from the disk", default="cacm",
            choices=["cacm", "wikipedia"])
    parser.add_argument("-s", "--stop-words", help="path to the file "
            "containing a list of 'stop words' to ignore when indexing",
            default="resources/common_words")
    parser.add_argument("-w", "--weight-method", help="how to compute the weights in the vectorial method", default="tfidf",
            choices=["tfidf","tf","ltf"])

    parser_search = subparsers.add_parser('search', help='Perform a search')
    parser_search.add_argument("request", help="a request string")
    parser_search.add_argument("-m", "--search-method", help="The method used to perform the search", default="vectorial",
            choices=["vectorial", "probabilistic", "boolean"])


    parser_evaluation = subparsers.add_parser('eval', help='Display the precision-recall plot for a given request')
    parser_evaluation.add_argument("request_id", help="a request number. Set to 0 to evaluate all requests.", type=int)
    parser_evaluation.add_argument("-q", "--requests", help="path to the file containing the requests", default="resources/query.text")
    parser_evaluation.add_argument("-r", "--results", help="path to the file containing the expected results for each request", default="resources/qrels.text")
    parser_evaluation.add_argument("-m", "--search-method", help="The method used to perform the search", default="vectorial",
            choices=["vectorial", "probabilistic"])

    parser_search.set_defaults(func=process_search)
    parser_evaluation.set_defaults(func=process_evaluation)
    args = parser.parse_args()
    args.func(args)

def process_search(args):
    """
    Parameters : args
    Creates an index and get the search results before printing them
    """
    try:
        if args.collection_type == "cacm":
            documents = load_from_cacm_file(args.collection)
        elif args.collection_type == "wikipedia":
            raise NotImplementedError("Wikipedia parser is not implemented yet.")
        stop_words = None
        with open(args.stop_words) as f:
            stop_words = f.read()
        index = Index(stop_words, list(documents))
        results = dispatch_search(args.search_method, index, get_weight_method(args.weight_method), args.request, args.answer_count)
        display_results(results)
    except FileNotFoundError as e:
        print("Could not find the file at: {0}".format(e.filename), file=sys.stderr)
        sys.exit(1)

def get_weight_method(arg_weight_method):
    """
    Parameter : Weight method entered by user
    Returns : Corresponding weight method enum
    """
    if arg_weight_method == "tfidf":
        return Weighting.Tf_Idf
    elif arg_weight_method == "ltf":
        return Weighting.LogTermFrequency
    elif arg_weight_method == "tf":
        return Weighting.TermFrequency
    else:
        raise 'wrong weight method'

def process_evaluation(args):
    """
    Parameters : args entered by user
    Method loads requests from the requests file, and corresponding results from the results file.
    It builds the index.
    """
    try:
        if args.collection_type == "cacm":
            documents = list(load_from_cacm_file(args.collection))
        elif args.collection_type == "wikipedia":
            raise NotImplementedError("Wikipedia parser is not implemented yet.")
        stop_words = None
        with open(args.stop_words) as f:
            stop_words = f.read()
        requests = load_from_query_file(args.requests)
        results = load_from_results_file(args.results)
        id = int(args.request_id)
        index = Index(stop_words, documents)

        if id == 0:
            eval_all_requests(requests, results, args.search_method, index, get_weight_method(args.weight_method),args.answer_count)
            sys.exit(0)

        if id not in requests:
            print("No request with id {0} found".format(id))
            sys.exit(1)
        if id not in results:
            print("Expected results for the request {0} not known".format(id))
            sys.exit(1)
        #print("Request:")
        #print(requests[id])
        print("\nPertinant documents:")
        print(results[id])
        request = Request(id, requests[id],results[id])
        eval_request(args.search_method, index, get_weight_method(args.weight_method), request, args.answer_count)
    except FileNotFoundError as e:
        print("Could not find the file at: {0}".format(e.filename), file=sys.stderr)
        sys.exit(1)

def dispatch_search(search_method, index, weight_method, request, answer_count):
    results = None
    if search_method == "vectorial":
        results = vectorial_search(request, index, answer_count, weight_method)
    elif search_method == "boolean":
        results = boolean_search(request, index)
    elif search_method == "probabilistic":
        results = binary_independance_retrieval(request, index, answer_count)
    else:
        raise UnknownMethodError("Method {0} is not supported".format(method), method)
    return results

def display_results(results):
    print(results)

def eval_all_requests(requests, results, search_method, index, weight_method, answer_count):
    """
    This method plots the average precision for all requests and search results.
    """
    request_list = []
    search_results = {}
    for request_id, request in requests.items():
        if request_id in results:
            r = Request(request_id, requests[request_id], results[request_id])
            request_list.append(r)
            search_results[request_id] = dispatch_search(search_method, index, weight_method, request, answer_count)
    plot_avg_precision(request_list, search_results)    
    
def eval_request(search_method, index, weight_method, request, answer_count):
    search_results = dispatch_search(search_method, index, weight_method, request.text, answer_count)
    print("\nSearch results:")
    print(search_results)
    plot_precision_vs_recall(request, search_results)

if __name__ == "__main__":
    try:
        main()
        sys.exit(0)
    except KeyboardInterrupt:
        # Users do not care much for a stacktrace when they Ctrl-C
        print("Exiting...")
        sys.exit(0)
