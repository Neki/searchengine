#!/usr/bin/env python3

import argparse
import sys

from searchengine.parser import load_from_cacm_file
from searchengine.search import vectorial_search, boolean_search

class UnknownMethodError(Exception):

    def __init__(self, message, method_name):
        super().__init__(message)
        self.method_name = method_name


def main():
    parser = argparse.ArgumentParser(description="A simple text search tool.")
    parser.add_argument("request", help="a request string")
    parser.add_argument("-n", "--answer-count", help="how many answers are returned (note: ignored for boolean search)", type=int, default=10)
    parser.add_argument("-c", "--collection", help="path to the file containing the collection", default="resources/cacm.all")
    parser.add_argument("-t", "--collection-type", help="select the parser used to "
            "load the collection from the disk", default="cacm",
            choices=["cacm", "wikipedia"])
    parser.add_argument("-s", "--stop-words", help="path to the file "
            "containing a list of 'stop words' to ignore when indexing",
            default="resources/common_words")
    parser.add_argument("-m", "--method", help="The method used to perform the search", default="vectorial",
            choices=["vectorial", "boolean"])
    args = parser.parse_args()
    process_command(args)

def process_command(args):
    try:
        if args.collection_type == "cacm":
            # documents is an iterator
            documents = load_from_cacm_file(args.collection)
        elif args.collection_type == "wikipedia":
            raise NotImplementedError("Wikipedia parser is not implemented yet.")
        stop_words = None
        with open(args.stop_words) as f:
            stop_words = f.read()
        dispatch_search(args.method, args.request, documents, stop_words, args.answer_count)
    except FileNotFoundError as e:
        print("Could not find the file at: {0}".format(e.filename), file=sys.stderr)
        sys.exit(1)


def dispatch_search(method, request, documents, stop_words, answer_count):
    results = None
    if method == "vectorial":
        results = vectorial_search(request, list(documents), stop_words, answer_count)
    elif method == "boolean":
        results = boolean_search(request, list(documents), stop_words, answer_count)
    else:
        raise UnknownMethodError("Method {0} is not supported".format(method), method)
    display_results(results)


def display_results(results):
    print(results)


if __name__ == "__main__":
    try:
        main()
        sys.exit(0)
    except KeyboardInterrupt:
        # Users do not care much for a stacktrace when they Ctrl-C
        print("Exiting...")
        sys.exit(0)
